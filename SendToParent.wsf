<package>

<!--

SETUP INSTRUCTIONS:
    from cmdline:
        wscript //job:setup SendToParent.wsf
    from a .JS file:
        var wssh = WScript.CreateObject("WScript.Shell");
        wssh.Run("wscript //job:setup SendToParent.wsf");
        
TODO: delete dirs to recycle bin!

-->


<!-- ############################################################################ -->
<job id="main">
<runtime>
  <!--description></description-->
</runtime>

<!-- **************************************************************************** -->
<script language="VBScript">
' consts
const ForReading   = 1
const ForWriting   = 2
const ForAppending = 8
const WshRunning   = 0
const WshFinished  = 1
const errStrCorrupt = "Corrupt file or unknown password."

' buttons
const mbOk                  = &H00000000
const mbOkCancel            = &H00000001
const mbAbortRetryIgnore    = &H00000002
const mbYesNoCancel         = &H00000003
const mbYesNo               = &H00000004
const mbRetryCancel         = &H00000005
const mbCancelTryContinue   = &H00000006  ' Win 5.0+
' icon
const mbIconHand            = &H00000010
const mbIconError           = &H00000010
const mbIconStop            = &H00000010
const mbIconQuestion        = &H00000020
const mbIconExclamation     = &H00000030
const mbIconWarning         = &H00000030
const mbIconAsterisk        = &H00000040
const mbIconInformation     = &H00000040
const mbUserIcon            = &H00000080
' def button
const mbDefButton1          = &H00000000
const mbDefButton2          = &H00000100
const mbDefButton3          = &H00000200
const mbDefButton4          = &H00000300
' modalilty
const mbApplModal           = &H00000000
const mbSystemModal         = &H00001000
const mbTaskModal           = &H00002000
' help button
const mbHelp                = &H00004000
' misc
const mbNoFocus             = &H00008000
const mbSetForeground       = &H00010000
const mbDefaultDesktopOnly  = &H00020000
const mbTopMost             = &H00040000
const mbRight               = &H00080000
const mbRtlReading          = &H00100000
const mbServiceNotification = &H00200000  ' Win NT+

const idOk       = 1
const idCancel   = 2
const idAbort    = 3
const idRetry    = 4
const idIgnore   = 5
const idYes      = 6
const idNo       = 7
const idClose    = 8
const idHelp     = 9
const idTryAgain = 10     ' Win 5.0+
const idContinue = 11     ' Win 5.0+
const idTimeout  = 32000  ' Win 5.1+

</script>

<!-- **************************************************************************** -->
<script language="JScript">

// globals
var wssh = WScript.CreateObject("WScript.Shell");
var fso = new ActiveXObject("Scripting.FileSystemObject");
var delCurDirs = false;
var dirsToDel = [];
var scriptTitle = fso.GetBaseName(WScript.ScriptName);


main();


function main() {
  var args = WScript.Arguments.Unnamed;
  var switches = WScript.Arguments.Named;

  // whether we'll delete the parents of all the items we'll move
  delCurDirs = switches.Exists("D")

  // process each cmdline item
  for (var n = 0; n < args.length; ++n)
    move(args(n));

  // delete parents if needed
  if (delCurDirs && dirsToDel.length != 0 && askDelDirs())
    delDirs();
}


// Return double-quoted string.
function quote(s) {
  return '"' + s + '"';
}


// Popup a msgbox and return user selection.
function popup(msg, flags) {
  return wssh.Popup(msg, 0, scriptTitle, flags);
}


// Move specified item up one level.
// Popup up a msg on error, allowing the user to abort.
// Return boolean continue.
function move(itemPath) {
  var srcDir = fso.GetParentFolderName(itemPath);
  var dstDir = fso.GetParentFolderName(srcDir);

  // already at root?
  if (!dstDir)
    return popup(quote(itemPath) + " is already at the root dir.", mbOkCancel) == idOk;

  var newPath = fso.BuildPath(dstDir, fso.GetFileName(itemPath));
  try {
    if (isPathFile(itemPath))
      fso.MoveFile(itemPath, newPath);
    else
      fso.MoveFolder(itemPath, newPath);

    if (delCurDirs)
      addUnique(dirsToDel, srcDir);

    return true;
  }
  catch (x) {
    var s = "Could not move " + quote(itemPath) + "\n" + 
            "to " + quote(newPath) + "\n\n" + 
            x.description;
    return popup(s, mbOkCancel) == idOk;
  }
}


// Ask the user whether to delete the parent dirs. Return reply.
function askDelDirs() {
  var s = "Delete these directories?\n\n" + dirsToDel.join("\n");
  return popup(s, mbOkCancel) == idOk;
}


// Delete the dirs stored in the global array.
// On error, popup a msg to allow the user to continue or abort.
// Return boolean continue.
function delDirs() {
  for (var n = 0; n < dirsToDel.length; ++n) {
    var s = tryDeleteDir(dirsToDel[n]);
    if (!s)
      continue;
    var msg = "Could not delete directory " + quote(dirsToDel[n]) + "\n" + 
              s + "\n\n Continue?";
    if (popup(msg, mbOkCancel) == idCancel)
      return false;
  }
  return true;
}


// Add a string to an array if not already there (case is ignored).
function addUnique(a, s) {
  for (var n = 0; n < a.length; ++n)
    if (a[n].toUpperCase() == s.toUpperCase())
      return;
  a.push(s);
}


// Try to delete a dir. On success return ""; otherwise, return err msg.
function tryDeleteDir(path) {
  try {
    fso.DeleteFolder(path);
    return "";
  }
  catch (x) {
    return x.description;
  }
}


// Tests whether the specified path is a dir.
function isPathDir(s) {
  try { fso.GetFolder(s); return true; }
  catch (x) { return false; }
}


// Tests whether the specified path is a file.
function isPathFile(s) {
  try { fso.GetFile(s); return true; }
  catch (x) { return false; }
}


</script>

</job>

<!-- ############################################################################ -->
<job id="setup">
<runtime>
  <!--description></description-->
</runtime>

<!-- **************************************************************************** -->
<script language="VBScript">
' consts
const jsYesNoCancel = 3
const jsCancel      = 2
const jsYes         = 6
</script>

<!-- **************************************************************************** -->
<script language="JScript">

// globals
var wssh = WScript.CreateObject("WScript.Shell");
var fso = new ActiveXObject("Scripting.FileSystemObject");


main();


function main() {
  // ask user (install/remove/cancel)
  var opt = wssh.Popup(startMsg(), 0, "Send To Parent extension", jsYesNoCancel);
  if (opt == jsCancel)
    return;
  var install = opt == jsYes;

  var sendToDir = wssh.SpecialFolders("SendTo");
  
  var nbsp = String.fromCharCode(0xA0);

  var lnkPath1 = fso.BuildPath(sendToDir, "Parent.lnk");
  var lnkPath2 = fso.BuildPath(sendToDir, "Parent" + nbsp + "(DEL dir!).lnk");  // nbsp forces this after the other link in the SendTo menu (its sorting seems buggy)

  if (install) {
    createLnk(
      lnkPath1,
      quote("%SYSTEMROOT%\\system32\\wscript.exe"),
      quote(WScript.ScriptFullName),
      sendToDir,
      "Moves items to parent directory.",
      "E:\\Projects\\test.ico");
    createLnk(
      lnkPath2,
      quote("%SYSTEMROOT%\\system32\\wscript.exe"),
      quote(WScript.ScriptFullName) + " /d",
      sendToDir,
      "Moves items to parent directory and deletes their original directory.",
      "E:\\Projects\\test.ico");
  }
  else {
    tryDeleteFile(lnkPath1);
    tryDeleteFile(lnkPath2);
  }
    
}


function tryDeleteFile(path) {
  try {
    fso.DeleteFile(path);
    return "";
  }
  catch (x) {
    return x.description;
  }
}


function createLnk(path, target, args, workDir, descr, icon) {
  var lnk = wssh.CreateShortcut(path);
  lnk.TargetPath   = target;
  lnk.Arguments    = args;
  lnk.WorkingDirectory = workDir;
  lnk.Description  = descr;
  lnk.IconLocation = icon;
  lnk.Save();
}


function quote(s) {
  return '"' + s + '"';
}


function startMsg() {
  var s = "";
  s += "Select:\n";
  s += "\tYes\tto install\n";
  s += "\tNo\tto remove\n";
  s += "\tCancel\tto quit\n";
  return s;
}


</script>

</job>

</package>
