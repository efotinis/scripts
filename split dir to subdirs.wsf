<job id="test">
<script language="VBScript">


Function jsInputBox(prompt, title, def, retOnCancel)
  Dim s
  s = InputBox(prompt, title, def)
  If IsEmpty(s) Then s = retOnCancel
  jsInputBox = s
End Function


</script>
<script language="JScript">


var fso = new ActiveXObject("Scripting.FileSystemObject");
var wssh = new ActiveXObject("WScript.Shell");


main();
WScript.Quit(0);


function main() {
  var opt = new Options;
  if (opt.err) { WScript.Echo(opt.err); return; }
  
  var files = getDirFilenames(opt.dir);
  if (!files) return;
  
  var filesPerSubdir = opt.countFiles ? opt.count : Math.ceil(files.length / opt.count);
  var subdirCount = Math.ceil(files.length / filesPerSubdir);
  
  /*
  var s = "\nfiles.length " + files.length
        + "\nfilesPerSubdir " + filesPerSubdir
        + "\nsubdirCount " + subdirCount;
  WScript.Echo(s);
  return;
  */
  
  for (var n = 0; n < subdirCount; ++n) {
    var subPath = fso.BuildPath(opt.dir, opt.subdirBase + (n + 1));
    if (!createDir(subPath)) return;
    var filesToMove = files.splice(0, filesPerSubdir);
    if (!moveFiles(filesToMove, opt.dir, subPath)) return;
  }
  
  WScript.Echo("Success");
}


// Get options from user.
function Options() {
  this.err        = "";
  this.dir        = "";
  this.count      = 0;
  this.countFiles = false;
  this.subdirBase = "sub ";

  for (;;) {
    this.dir = trim(jsInputBox("Source directory", WScript.Name, "", ""));
    if (this.dir == "") WScript.Quit(0);
    if (!fso.FolderExists(this.dir))
      WScript.Echo("Invalid dir: " + q(this.dir));
    else
      break;
  }

  this.subdirBase = jsInputBox("Subdirectory base name (can be empty).\nA number will be appended in the generated names.", WScript.Name, this.subdirBase, null);
  if (this.subdirBase == null) WScript.Quit(0);
  this.subdirBase = trim(this.subdirBase);

  var s = trim(jsInputBox("Split count:\n\tF num  Number of files per subdir\n\tS num  Number of subdirs", WScript.Name, "", ""));
  if (s == "") WScript.Quit(0);
  var splitCountFiles;
  var opt = s.charAt(0);
  switch (opt.toUpperCase()) {
    case "F": this.countFiles = true; break;
    case "S": this.countFiles = false; break;
    default: this.err = "Invalid option: " + q(opt); return;
  }
  s = trim(s.substr(1));
  this.count = parseInt(s);
  if (isNaN(this.count) || this.count <= 0) {
    this.err = "Invalid count: " + this.count;
    return;
  }
}


// Get an array of filename or null on error.
function getDirFilenames(dirPath) {
  try {
    var files = [];
    for (var e = new Enumerator(fso.GetFolder(dirPath).Files); !e.atEnd(); e.moveNext())
      files.push(e.item().Name);
    return files;
  }
  catch (x) {
    WScript.Echo("Could not get files of dir " + q(dirPath) + "\n\n" + x.description);
    return null;
  }    
}


// Create a directory, and return a Folder object or null on error.
function createDir(path) {
  try {
    return fso.CreateFolder(path);
  }
  catch (x) {
    WScript.Echo("Could not create dir " + q(path) + "\n\n" + x.description);
    return null;
  }
}


function moveFiles(files, srcDir, dstDir) {
  for (var i in files) {
    var src = fso.BuildPath(srcDir, files[i]);
    var dst = fso.BuildPath(dstDir, files[i]);
    try {
      fso.MoveFile(src, dst);
    }
    catch (x) {
      WSCript.Echo("Could not move file " + q(src) + "\nto " + q(dst) + "\n\n" + x.description);
      return false;
    }
  }
  return true;
}


function trim(s) { return s.replace(/^\s+/, "").replace(/\s+$/, ""); }
function q(s) { return '"' + s + '"'; }


</script>
</job>
